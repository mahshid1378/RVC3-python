%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 513 213
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 513 213
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.70196098 0.70196098 0.70196098 sc
q
0 0 512.04346 212.27803 rc
113.93553 29.60379 m
170.62843 29.60379 l
170.62843 1.2572907 l
113.93553 1.2572907 l
h
113.93553 29.60379 m
f
2 J
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
141.73199 198.425 m
198.4249 198.425 l
198.4249 226.7715 l
141.73199 226.7715 l
h
141.73199 198.425 m
S
0.70196098 0.70196098 0.70196098 sc
CM
170.62854 29.60379 m
227.32143 29.60379 l
227.32143 1.2572907 l
170.62854 1.2572907 l
h
170.62854 29.60379 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
198.425 198.425 m
255.1179 198.425 l
255.1179 226.7715 l
198.425 226.7715 l
h
198.425 198.425 m
S
0.70196098 0.70196098 0.70196098 sc
CM
57.242935 29.60379 m
113.93584 29.60379 l
113.93584 1.2572907 l
57.242935 1.2572907 l
h
57.242935 29.60379 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
85.039398 198.425 m
141.7323 198.425 l
141.7323 226.7715 l
85.039398 226.7715 l
h
85.039398 198.425 m
S
0.70196098 0.70196098 0.70196098 sc
CM
227.32153 29.60379 m
284.01443 29.60379 l
284.01443 1.2572907 l
227.32153 1.2572907 l
h
227.32153 29.60379 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
255.118 198.425 m
311.81091 198.425 l
311.81091 226.7715 l
255.118 226.7715 l
h
255.118 198.425 m
S
0.70196098 0.70196098 0.70196098 sc
CM
284.01453 29.60379 m
340.70743 29.60379 l
340.70743 1.2572907 l
284.01453 1.2572907 l
h
284.01453 29.60379 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
311.811 198.425 m
368.50391 198.425 l
368.50391 226.7715 l
311.811 226.7715 l
h
311.811 198.425 m
S
0 0 1 sc
CM
57.242935 40.941792 m
113.93584 40.941792 l
113.93584 29.603191 l
57.242935 29.603191 l
h
57.242935 40.941792 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
85.039398 187.08701 m
141.7323 187.08701 l
141.7323 198.4256 l
85.039398 198.4256 l
h
85.039398 187.08701 m
S
0 0 1 sc
CM
57.242916 40.94215 m
57.242916 40.94215 l
113.93584 40.94215 l
142.28233 69.288605 l
85.589378 69.288605 l
57.242916 40.94215 l
57.242916 40.94215 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
85.039383 187.08664 m
85.039383 187.08664 l
141.7323 187.08664 l
170.0788 158.74019 l
113.38584 158.74019 l
85.039383 187.08664 l
85.039383 187.08664 m
S
0 0 1 sc
CM
170.62854 40.941792 m
227.32143 40.941792 l
227.32143 29.603191 l
170.62854 29.603191 l
h
170.62854 40.941792 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
198.425 187.08701 m
255.1179 187.08701 l
255.1179 198.4256 l
198.425 198.4256 l
h
198.425 187.08701 m
S
0 0 1 sc
CM
170.62877 40.94215 m
170.62877 40.94215 l
227.32167 40.94215 l
255.66826 69.288605 l
198.97523 69.288605 l
170.62877 40.94215 l
170.62877 40.94215 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
198.42523 187.08664 m
198.42523 187.08664 l
255.11813 187.08664 l
283.46472 158.74019 l
226.7717 158.74019 l
198.42523 187.08664 l
198.42523 187.08664 m
S
0 0 1 sc
CM
284.01453 40.941792 m
340.70743 40.941792 l
340.70743 29.603191 l
284.01453 29.603191 l
h
284.01453 40.941792 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
311.811 187.08701 m
368.50391 187.08701 l
368.50391 198.4256 l
311.811 198.4256 l
h
311.811 187.08701 m
S
0 0 1 sc
CM
284.01459 40.94215 m
284.01459 40.94215 l
340.70749 40.94215 l
369.05396 69.288605 l
312.36105 69.288605 l
284.01459 40.94215 l
284.01459 40.94215 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
311.81107 187.08664 m
311.81107 187.08664 l
368.50397 187.08664 l
396.85043 158.74019 l
340.15753 158.74019 l
311.81107 187.08664 l
311.81107 187.08664 m
S
0.50196099 1 0 sc
CM
113.93585 40.94215 m
113.93585 40.94215 l
170.62877 40.94215 l
198.97523 69.288605 l
142.2823 69.288605 l
113.93585 40.94215 l
113.93585 40.94215 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
141.73232 187.08664 m
141.73232 187.08664 l
198.42523 187.08664 l
226.7717 158.74019 l
170.07877 158.74019 l
141.73232 187.08664 l
141.73232 187.08664 m
S
0.50196099 1 0 sc
CM
113.93553 40.941792 m
170.62843 40.941792 l
170.62843 29.603191 l
113.93553 29.603191 l
h
113.93553 40.941792 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
141.73199 187.08701 m
198.4249 187.08701 l
198.4249 198.4256 l
141.73199 198.4256 l
h
141.73199 187.08701 m
S
0.50196099 1 0 sc
CM
227.32169 40.942135 m
227.32169 40.942135 l
284.01465 40.942135 l
312.36108 69.288605 l
255.66814 69.288605 l
227.32169 40.942135 l
227.32169 40.942135 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
255.11815 187.08665 m
255.11815 187.08665 l
311.81113 187.08665 l
340.15756 158.74019 l
283.4646 158.74019 l
255.11815 187.08665 l
255.11815 187.08665 m
S
0.50196099 1 0 sc
CM
227.32153 40.941792 m
284.01443 40.941792 l
284.01443 29.603191 l
227.32153 29.603191 l
h
227.32153 40.941792 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
255.118 187.08701 m
311.81091 187.08701 l
311.81091 198.4256 l
255.118 198.4256 l
h
255.118 187.08701 m
S
0.50196099 1 0 sc
CM
85.589378 69.28862 m
85.589378 69.28862 l
142.2823 69.28862 l
170.62877 97.635071 l
113.93584 97.635071 l
85.589378 69.28862 l
85.589378 69.28862 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
113.38584 158.74017 m
113.38584 158.74017 l
170.07877 158.74017 l
198.42523 130.39372 l
141.7323 130.39372 l
113.38584 158.74017 l
113.38584 158.74017 m
S
0.50196099 1 0 sc
CM
198.97522 69.288605 m
198.97522 69.288605 l
255.6682 69.288605 l
284.0148 97.635071 l
227.32167 97.635071 l
198.97522 69.288605 l
198.97522 69.288605 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
226.77168 158.74019 m
226.77168 158.74019 l
283.46466 158.74019 l
311.81128 130.39372 l
255.11813 130.39372 l
226.77168 158.74019 l
226.77168 158.74019 m
S
0.50196099 1 0 sc
CM
312.36102 69.28862 m
312.36102 69.28862 l
369.05396 69.28862 l
397.40039 97.635071 l
340.70752 97.635071 l
312.36102 69.28862 l
312.36102 69.28862 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
340.1575 158.74017 m
340.1575 158.74017 l
396.85043 158.74017 l
425.19687 130.39372 l
368.504 130.39372 l
340.1575 158.74017 l
340.1575 158.74017 m
S
1 0 0 sc
CM
142.2823 69.28862 m
142.2823 69.28862 l
198.97522 69.28862 l
227.32169 97.635071 l
170.62875 97.635071 l
142.2823 69.28862 l
142.2823 69.28862 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
170.07877 158.74017 m
170.07877 158.74017 l
226.77168 158.74017 l
255.11815 130.39372 l
198.42522 130.39372 l
170.07877 158.74017 l
170.07877 158.74017 m
S
1 0 0 sc
CM
255.66814 69.28862 m
255.66814 69.28862 l
312.36102 69.28862 l
340.70752 97.635071 l
284.01459 97.635071 l
255.66814 69.28862 l
255.66814 69.28862 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
283.4646 158.74017 m
283.4646 158.74017 l
340.1575 158.74017 l
368.504 130.39372 l
311.81107 130.39372 l
283.4646 158.74017 l
283.4646 158.74017 m
S
0 0 1 sc
CM
113.93585 97.635086 m
113.93585 97.635086 l
170.6288 97.635086 l
198.97527 125.98153 l
142.28233 125.98153 l
113.93585 97.635086 l
113.93585 97.635086 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
141.73232 130.39371 m
141.73232 130.39371 l
198.42526 130.39371 l
226.77173 102.04726 l
170.0788 102.04726 l
141.73232 130.39371 l
141.73232 130.39371 m
S
0 0 1 sc
CM
227.32169 97.635071 m
227.32169 97.635071 l
284.01465 97.635071 l
312.36127 125.98153 l
255.66817 125.98153 l
227.32169 97.635071 l
227.32169 97.635071 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
255.11815 130.39372 m
255.11815 130.39372 l
311.81113 130.39372 l
340.15775 102.04726 l
283.46463 102.04726 l
255.11815 130.39372 l
255.11815 130.39372 m
S
0 0 1 sc
CM
340.70749 97.635086 m
340.70749 97.635086 l
397.40042 97.635086 l
425.74686 125.98153 l
369.05399 125.98153 l
340.70749 97.635086 l
340.70749 97.635086 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
368.50397 130.39371 m
368.50397 130.39371 l
425.1969 130.39371 l
453.54333 102.04726 l
396.85046 102.04726 l
368.50397 130.39371 l
368.50397 130.39371 m
S
0.50196099 1 0 sc
CM
170.62877 97.635086 m
170.62877 97.635086 l
227.3217 97.635086 l
255.66826 125.98153 l
198.97523 125.98153 l
170.62877 97.635086 l
170.62877 97.635086 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
198.42523 130.39371 m
198.42523 130.39371 l
255.11816 130.39371 l
283.46472 102.04726 l
226.7717 102.04726 l
198.42523 130.39371 l
198.42523 130.39371 m
S
0.50196099 1 0 sc
CM
284.01459 97.635056 m
284.01459 97.635056 l
340.70761 97.635056 l
369.05405 125.98153 l
312.36111 125.98153 l
284.01459 97.635056 l
284.01459 97.635056 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
311.81107 130.39374 m
311.81107 130.39374 l
368.50409 130.39374 l
396.85052 102.04726 l
340.15759 102.04726 l
311.81107 130.39374 l
311.81107 130.39374 m
S
0.50196099 1 0 sc
CM
142.2823 125.98154 m
142.2823 125.98154 l
198.97525 125.98154 l
227.32169 154.32799 l
170.62875 154.32799 l
142.2823 125.98154 l
142.2823 125.98154 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
170.07877 102.04726 m
170.07877 102.04726 l
226.77171 102.04726 l
255.11815 73.700798 l
198.42522 73.700798 l
170.07877 102.04726 l
170.07877 102.04726 m
S
0.50196099 1 0 sc
CM
255.66814 125.98152 m
255.66814 125.98152 l
312.36108 125.98152 l
340.70758 154.32799 l
284.01459 154.32799 l
255.66814 125.98152 l
255.66814 125.98152 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
283.4646 102.04727 m
283.4646 102.04727 l
340.15756 102.04727 l
368.50406 73.700798 l
311.81107 73.700798 l
283.4646 102.04727 l
283.4646 102.04727 m
S
0.50196099 1 0 sc
CM
369.05396 125.98154 m
369.05396 125.98154 l
425.74689 125.98154 l
454.09332 154.32799 l
397.40045 154.32799 l
369.05396 125.98154 l
369.05396 125.98154 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
396.85043 102.04726 m
396.85043 102.04726 l
453.54337 102.04726 l
481.8898 73.700798 l
425.19693 73.700798 l
396.85043 102.04726 l
396.85043 102.04726 m
S
1 0 0 sc
CM
198.97522 125.98154 m
198.97522 125.98154 l
255.66826 125.98154 l
284.0148 154.32799 l
227.32169 154.32799 l
198.97522 125.98154 l
198.97522 125.98154 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
226.77168 102.04726 m
226.77168 102.04726 l
283.46472 102.04726 l
311.81128 73.700798 l
255.11815 73.700798 l
226.77168 102.04726 l
226.77168 102.04726 m
S
1 0 0 sc
CM
312.36102 125.98155 m
312.36102 125.98155 l
369.05402 125.98155 l
397.40051 154.32799 l
340.70752 154.32799 l
312.36102 125.98155 l
312.36102 125.98155 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
340.1575 102.04724 m
340.1575 102.04724 l
396.85049 102.04724 l
425.19699 73.700798 l
368.504 73.700798 l
340.1575 102.04724 l
340.1575 102.04724 m
S
0 0 1 sc
CM
340.70749 40.94215 m
340.70749 40.94215 l
369.05392 69.288605 l
369.05392 57.950024 l
340.70749 29.603559 l
340.70749 40.94215 l
340.70749 40.94215 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
368.50397 187.08664 m
368.50397 187.08664 l
396.8504 158.74019 l
396.8504 170.07877 l
368.50397 198.42523 l
368.50397 187.08664 l
368.50397 187.08664 m
S
0 0 1 sc
CM
397.40042 97.635086 m
397.40042 97.635086 l
425.74686 125.98153 l
425.74686 114.64296 l
397.40042 86.296494 l
397.40042 97.635086 l
397.40042 97.635086 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
425.1969 130.39371 m
425.1969 130.39371 l
453.54333 102.04726 l
453.54333 113.38583 l
425.1969 141.7323 l
425.1969 130.39371 l
425.1969 130.39371 m
S
0.50196099 1 0 sc
CM
369.05396 69.288605 m
369.05396 69.288605 l
397.40039 97.635071 l
397.40039 86.296478 l
369.05396 57.950008 l
369.05396 69.288605 l
369.05396 69.288605 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
396.85043 158.74019 m
396.85043 158.74019 l
425.19687 130.39372 l
425.19687 141.73232 l
396.85043 170.07878 l
396.85043 158.74019 l
396.85043 158.74019 m
S
0.50196099 1 0 sc
CM
425.74689 125.98155 m
425.74689 125.98155 l
454.09332 154.32799 l
454.09332 142.98943 l
425.74689 114.64296 l
425.74689 125.98155 l
425.74689 125.98155 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
453.54337 102.04724 m
453.54337 102.04724 l
481.8898 73.700798 l
481.8898 85.039368 l
453.54337 113.38583 l
453.54337 102.04724 l
453.54337 102.04724 m
S
0.70196098 0.70196098 0.70196098 sc
CM
340.70749 29.603559 m
340.70749 29.603559 l
369.05392 57.950024 l
369.05396 29.603573 l
340.70752 1.2571077 l
340.70752 12.5957 l
340.70752 12.5957 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
368.50397 198.42523 m
368.50397 198.42523 l
396.8504 170.07877 l
396.85043 198.42522 l
368.504 226.77168 l
368.504 215.43309 l
368.504 215.43309 m
S
0.70196098 0.70196098 0.70196098 sc
CM
425.74689 114.64294 m
425.74689 114.64294 l
454.09332 142.98941 l
454.09335 114.64297 l
425.74692 86.296509 l
425.74692 97.635101 l
425.74692 97.635101 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
453.54337 113.38586 m
453.54337 113.38586 l
481.8898 85.039383 l
481.88983 113.38583 l
453.5434 141.73228 l
453.5434 130.39369 l
453.5434 130.39369 m
S
0.70196098 0.70196098 0.70196098 sc
CM
369.05396 57.950008 m
369.05396 57.950008 l
397.40039 86.296478 l
397.40042 57.950039 l
369.05399 29.603573 l
369.05399 40.942165 l
369.05399 40.942165 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
396.85043 170.07878 m
396.85043 170.07878 l
425.19687 141.73232 l
425.1969 170.07875 l
396.85046 198.42522 l
396.85046 187.08662 l
396.85046 187.08662 m
S
0.70196098 0.70196098 0.70196098 sc
CM
397.40042 86.296494 m
397.40042 86.296494 l
425.74686 114.64295 l
425.74689 86.296524 l
397.40045 57.950054 l
397.40045 69.288651 l
397.40045 69.288651 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
425.1969 141.7323 m
425.1969 141.7323 l
453.54333 113.38584 l
453.54337 141.73227 l
425.19693 170.07874 l
425.19693 158.74014 l
425.19693 158.74014 m
S
0.70196098 0.70196098 0.70196098 sc
CM
0.55003399 29.60379 m
57.242935 29.60379 l
57.242935 1.2572907 l
0.55003399 1.2572907 l
h
0.55003399 29.60379 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
28.3465 198.425 m
85.039398 198.425 l
85.039398 226.7715 l
28.3465 226.7715 l
h
28.3465 198.425 m
S
0.50196099 1 0 sc
CM
0.55003399 40.941792 m
57.242935 40.941792 l
57.242935 29.603191 l
0.55003399 29.603191 l
h
0.55003399 40.941792 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
28.3465 187.08701 m
85.039398 187.08701 l
85.039398 198.4256 l
28.3465 198.4256 l
h
28.3465 187.08701 m
S
0.50196099 1 0 sc
CM
0.55000001 40.94215 m
0.55000001 40.94215 l
57.242916 40.94215 l
85.589371 69.288605 l
28.896458 69.288605 l
0.55000001 40.94215 l
0.55000001 40.94215 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
28.346466 187.08664 m
28.346466 187.08664 l
85.039383 187.08664 l
113.38583 158.74019 l
56.692924 158.74019 l
28.346466 187.08664 l
28.346466 187.08664 m
S
1 0 0 sc
CM
28.896458 69.28862 m
28.896458 69.28862 l
85.58934 69.28862 l
113.93576 97.635071 l
57.242886 97.635071 l
28.896458 69.28862 l
28.896458 69.28862 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
56.692924 158.74017 m
56.692924 158.74017 l
113.3858 158.74017 l
141.73222 130.39372 l
85.039352 130.39372 l
56.692924 158.74017 l
56.692924 158.74017 m
S
0.50196099 1 0 sc
CM
57.242916 97.635086 m
57.242916 97.635086 l
113.93582 97.635086 l
142.28238 125.98154 l
85.589371 125.98154 l
57.242916 97.635086 l
57.242916 97.635086 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
85.039383 130.39371 m
85.039383 130.39371 l
141.73228 130.39371 l
170.07884 102.04726 l
113.38583 102.04726 l
85.039383 130.39371 l
85.039383 130.39371 m
S
1 0 0 sc
CM
85.58934 125.98154 m
85.58934 125.98154 l
142.28238 125.98154 l
170.62897 154.328 l
113.93576 154.328 l
85.58934 125.98154 l
85.58934 125.98154 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
113.3858 102.04725 m
113.3858 102.04725 l
170.07884 102.04725 l
198.42543 73.70079 l
141.73222 73.70079 l
113.3858 102.04725 l
113.3858 102.04725 m
S
0 0 1 sc
CM
170.62875 154.32799 m
170.62875 154.32799 l
227.3217 154.32799 l
255.66826 182.67445 l
198.97523 182.67445 l
170.62875 154.32799 l
170.62875 154.32799 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
198.42522 73.700798 m
198.42522 73.700798 l
255.11816 73.700798 l
283.46472 45.35434 l
226.7717 45.35434 l
198.42522 73.700798 l
198.42522 73.700798 m
S
0 0 1 sc
CM
284.01468 154.32799 m
284.01468 154.32799 l
340.70767 154.32799 l
369.05429 182.67445 l
312.36118 182.67445 l
284.01468 154.32799 l
284.01468 154.32799 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
311.81116 73.700798 m
311.81116 73.700798 l
368.50415 73.700798 l
396.85077 45.35434 l
340.15765 45.35434 l
311.81116 73.700798 l
311.81116 73.700798 m
S
0 0 1 sc
CM
397.40054 154.32799 m
397.40054 154.32799 l
454.09348 154.32799 l
482.43991 182.67445 l
425.74704 182.67445 l
397.40054 154.32799 l
397.40054 154.32799 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
425.19702 73.700798 m
425.19702 73.700798 l
481.88995 73.700798 l
510.23639 45.35434 l
453.54352 45.35434 l
425.19702 73.700798 l
425.19702 73.700798 m
S
0.50196099 1 0 sc
CM
227.32167 154.32799 m
227.32167 154.32799 l
284.01474 154.32799 l
312.3613 182.67445 l
255.6682 182.67445 l
227.32167 154.32799 l
227.32167 154.32799 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
255.11813 73.700798 m
255.11813 73.700798 l
311.81122 73.700798 l
340.15778 45.35434 l
283.46466 45.35434 l
255.11813 73.700798 l
255.11813 73.700798 m
S
0.50196099 1 0 sc
CM
340.70761 154.32796 m
340.70761 154.32796 l
397.40067 154.32796 l
425.7471 182.67445 l
369.05417 182.67445 l
340.70761 154.32796 l
340.70761 154.32796 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
368.50409 73.700829 m
368.50409 73.700829 l
425.19714 73.700829 l
453.54358 45.35434 l
396.85065 45.35434 l
368.50409 73.700829 l
368.50409 73.700829 m
S
0.50196099 1 0 sc
CM
198.9752 182.67445 m
198.9752 182.67445 l
255.66826 182.67445 l
284.01468 211.02092 l
227.32166 211.02092 l
198.9752 182.67445 l
198.9752 182.67445 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
226.77167 45.354332 m
226.77167 45.354332 l
283.46472 45.354332 l
311.81116 17.007874 l
255.11812 17.007874 l
226.77167 45.354332 l
226.77167 45.354332 m
S
0.50196099 1 0 sc
CM
312.36118 182.67444 m
312.36118 182.67444 l
369.05411 182.67444 l
397.4006 211.02092 l
340.70761 211.02092 l
312.36118 182.67444 l
312.36118 182.67444 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
340.15765 45.354347 m
340.15765 45.354347 l
396.85059 45.354347 l
425.19708 17.007874 l
368.50409 17.007874 l
340.15765 45.354347 l
340.15765 45.354347 m
S
0.50196099 1 0 sc
CM
425.74698 182.67445 m
425.74698 182.67445 l
482.43991 182.67445 l
510.78635 211.02092 l
454.09348 211.02092 l
425.74698 182.67445 l
425.74698 182.67445 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
453.54346 45.354332 m
453.54346 45.354332 l
510.23639 45.354332 l
538.58282 17.007874 l
481.88995 17.007874 l
453.54346 45.354332 l
453.54346 45.354332 m
S
1 0 0 sc
CM
255.6682 182.67445 m
255.6682 182.67445 l
312.3613 182.67445 l
340.70786 211.02092 l
284.01468 211.02092 l
255.6682 182.67445 l
255.6682 182.67445 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
283.46466 45.354332 m
283.46466 45.354332 l
340.15778 45.354332 l
368.50433 17.007874 l
311.81116 17.007874 l
283.46466 45.354332 l
283.46466 45.354332 m
S
1 0 0 sc
CM
369.05405 182.67447 m
369.05405 182.67447 l
425.74704 182.67447 l
454.09354 211.02092 l
397.40054 211.02092 l
369.05405 182.67447 l
369.05405 182.67447 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
396.85052 45.354317 m
396.85052 45.354317 l
453.54352 45.354317 l
481.89001 17.007874 l
425.19702 17.007874 l
396.85052 45.354317 l
396.85052 45.354317 m
S
0 0 1 sc
CM
454.09348 154.32799 m
454.09348 154.32799 l
482.43991 182.67445 l
482.43991 171.33588 l
454.09348 142.98941 l
454.09348 154.32799 l
454.09348 154.32799 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
481.88995 73.700798 m
481.88995 73.700798 l
510.23639 45.35434 l
510.23639 56.692909 l
481.88995 85.039375 l
481.88995 73.700798 l
481.88995 73.700798 m
S
0.50196099 1 0 sc
CM
482.43991 182.67447 m
482.43991 182.67447 l
510.78635 211.02092 l
510.78635 199.68234 l
482.43991 171.33588 l
482.43991 182.67447 l
482.43991 182.67447 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
510.23639 45.354317 m
510.23639 45.354317 l
538.58282 17.007874 l
538.58282 28.346443 l
510.23639 56.692909 l
510.23639 45.354317 l
510.23639 45.354317 m
S
0.70196098 0.70196098 0.70196098 sc
CM
482.43991 171.33586 m
482.43991 171.33586 l
510.78635 199.68233 l
510.78641 171.33589 l
482.43997 142.98944 l
482.43997 154.32802 l
482.43997 154.32802 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
510.23639 56.692932 m
510.23639 56.692932 l
538.58282 28.346458 l
538.58289 56.692902 l
510.23645 85.039345 l
510.23645 73.700768 l
510.23645 73.700768 m
S
0.50196099 1 0 sc
CM
113.93581 154.32799 m
113.93581 154.32799 l
170.62872 154.32799 l
198.97528 182.67445 l
142.28226 182.67445 l
113.93581 154.32799 l
113.93581 154.32799 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
141.73227 73.700798 m
141.73227 73.700798 l
198.42519 73.700798 l
226.77174 45.354332 l
170.07872 45.354332 l
141.73227 73.700798 l
141.73227 73.700798 m
S
1 0 0 sc
CM
142.28223 182.67447 m
142.28223 182.67447 l
198.97528 182.67447 l
227.32187 211.02092 l
170.62866 211.02092 l
142.28223 182.67447 l
142.28223 182.67447 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
170.07869 45.354324 m
170.07869 45.354324 l
226.77174 45.354324 l
255.11833 17.007866 l
198.42513 17.007866 l
170.07869 45.354324 l
170.07869 45.354324 m
S
0.70196098 0.70196098 0.70196098 sc
CM
454.09332 142.9894 m
454.09332 142.9894 l
482.43976 171.33586 l
482.43979 142.98943 l
454.09335 114.64296 l
454.09335 125.98156 l
454.09335 125.98156 m
f
0 0 0 sc
1 0 0 -1 -27.796467 228.02879 cm
481.8898 85.039398 m
481.8898 85.039398 l
510.23624 56.692924 l
510.23627 85.039368 l
481.88983 113.38583 l
481.88983 102.04723 l
481.88983 102.04723 m
S
ep
end
%%Trailer
%%EOF
